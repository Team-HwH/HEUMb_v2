# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './HEUMb_main_proto2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QPushButton, QInputDialog


class Ui_HEUMb(QtWidgets.QMainWindow):
    def setupUi(self, HEUMb):
        HEUMb.setObjectName("HEUMb")
        HEUMb.resize(400, 250)
        HEUMb.setMinimumSize(QtCore.QSize(400, 250))
        HEUMb.setMaximumSize(QtCore.QSize(400, 250))
        HEUMb.setBaseSize(QtCore.QSize(400, 250))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("heumb2_logo.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        HEUMb.setWindowIcon(icon)
        HEUMb.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(HEUMb)
        self.centralwidget.setObjectName("centralwidget")
        self.encrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.encrypt_btn.setEnabled(True)
        self.encrypt_btn.setGeometry(QtCore.QRect(310, 20, 81, 81))
        self.encrypt_btn.setSizeIncrement(QtCore.QSize(0, 0))
        self.encrypt_btn.setBaseSize(QtCore.QSize(0, 0))
        self.encrypt_btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.encrypt_btn.setCheckable(False)
        self.encrypt_btn.setChecked(False)
        self.encrypt_btn.setObjectName("encrypt_btn")
        self.decrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.decrypt_btn.setEnabled(True)
        self.decrypt_btn.setGeometry(QtCore.QRect(310, 110, 81, 81))
        self.decrypt_btn.setSizeIncrement(QtCore.QSize(0, 0))
        self.decrypt_btn.setBaseSize(QtCore.QSize(0, 0))
        self.decrypt_btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.decrypt_btn.setObjectName("decrypt_btn")
        self.Copyright = QtWidgets.QLabel(self.centralwidget)
        self.Copyright.setGeometry(QtCore.QRect(10, 190, 381, 31))
        self.Copyright.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Copyright.setAlignment(QtCore.Qt.AlignCenter)
        self.Copyright.setObjectName("Copyright")
        self.license_text = QtWidgets.QTextBrowser(self.centralwidget)
        self.license_text.setGeometry(QtCore.QRect(10, 20, 291, 171))
        self.license_text.setLineWidth(1)
        self.license_text.setObjectName("license_text")
        HEUMb.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(HEUMb)
        self.statusbar.setObjectName("statusbar")
        HEUMb.setStatusBar(self.statusbar)
        self.action_usage = QtWidgets.QAction(HEUMb)
        self.action_usage.setCheckable(False)
        self.action_usage.setObjectName("action_usage")
        self.action_dev = QtWidgets.QAction(HEUMb)
        self.action_dev.setObjectName("action_dev")

        self.retranslateUi(HEUMb)
        self.encrypt_btn.clicked.connect(self.ENCRYPT)
        self.decrypt_btn.clicked.connect(self.DECRYPT)
        QtCore.QMetaObject.connectSlotsByName(HEUMb)

    def retranslateUi(self, HEUMb):
        _translate = QtCore.QCoreApplication.translate
        HEUMb.setWindowTitle(_translate("HEUMb", "(HEUM)b 2.0"))
        self.encrypt_btn.setText(_translate("HEUMb", "Encrypt"))
        self.decrypt_btn.setText(_translate("HEUMb", "Decrypt"))
        self.Copyright.setText(_translate("HEUMb", "Copyright ⓒ all rights reserved 2021"))
        self.license_text.setHtml(_translate("HEUMb",
                                             "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                             "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                             "p, li { white-space: pre-wrap; }\n"
                                             "</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                             "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Team. HwH</p>\n"
                                             "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                             "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">이 프로그램은 사용자의 파일을 암호화하여 안전하게 보호하기 위해 개발된 프로그램으로,</p>\n"
                                             "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Encrypt 버튼을 눌러 선택한 파일들을 암호화하고,</p>\n"
                                             "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Decrypt 버튼을 눌러 선택한 파일들을 복호화합니다.</p>\n"
                                             "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                             "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This Program is Protected by <a href=\"https://www.gnu.org/licenses/gpl-3.0.html\"><span style=\" text-decoration: underline; color:#0000ff;\">GNU GPL 3.0</span></a> License</p></body></html>"))

    def GET_PASS(self):
        text, ok = QInputDialog.getText(self, 'input password', 'Input PW')
        if ok:
            return str(text)
        else:
            return ''

    def ENCRYPT(self):
        filename = QtWidgets.QFileDialog.getOpenFileNames(self, 'Select File to encrypt', '/')
        if not filename[0] == []:
            password = self.GET_PASS()

    def DECRYPT(self):
        filename = QtWidgets.QFileDialog.getOpenFileNames(self, 'Select File to decrypt', '/')
        if not filename[0] == []:
            password = self.GET_PASS()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    HEUMb = QtWidgets.QMainWindow()
    ui = Ui_HEUMb()
    ui.setupUi(HEUMb)
    HEUMb.show()
    sys.exit(app.exec_())
